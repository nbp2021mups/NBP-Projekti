*** Redis ***

- Key-value store
- Skup tipova podataka:
	- String
	- Složeni tipovi:
		- List
		- Stream
		- Set
		- Sorted set
		- Hash
		- Bitmaps
		- Hiperloglog???

* Ključevi u redisu:
	- Balans u veličini ključa (ne mali, ne veliki)
	- Najbolja stvar je definisanje šeme po kojoj se definiše ključ
		prefiks + hash + sufiks (app logic, business logic)
	- Binary safe
	- Implicitna konverzija stringova (inkerementiranje intigera, čitanje stringa kasnije)
	- Za svaki skup podataka postoji predefinisani skup operacija
	- Expiration time za ključeve (ukoliko mu se ne pristupi u tom vremenu, briše se automatski)
	
- Liste u redisu:
	- Dvostruko spregnute lančane liste
	- Proizvoljna veličina
	- Dodavanje/uzimanje sa leve ili desne strane
	- Može da sadrži duplikate (ofc)
	- Blokirajuće operacija nad listama
		* Aplikacija asinhronim zahtevom zahteva da pročita vrednost, ali ukoliko je lista prazna, odnosno nema šta da se pročita, desiće se blokiranje i redis kreira novi thread u kome čeka obaveštenje od lsite da više nije prazna
		* Prefiks ("B") ispred naziva metode => asinhrona/blokirajuća operacija
	- Lake za producer/consumer
	
- Set u redisu:
	- Ne dozvoljava duplikate
	- Jedinstvene vrednosti
	- Isti skup operacija kao i liste
	- Osnovna operacija je range kao i za liste (definisanje opsega indeksa koji se nabavlja iz baze)
	- Sortirani ili nesortirani
	- Ukoliko imamo unapred sortirane vrednosti koje je potrebno da pamtimo, njih možemo da pamtimo kao sorted set
	- Osim vrednosti se dodelju je i dodatna vrednost "score" za svaku vrednost unutar seta
	- Na osnovu "score"-a se vrši sortiranje, ukoliko se ovo ne dodeli, onda redis to sam odradi i vrednosti se posmatraju kao stringovi, odnosno uređuju se leksikografski
	
* Redis je single-threaded
	- Jedinstveni kanal [red čekanja za zahteve]
	- Atomične operacije (inkrementiranje, dekrementiranje)
		- bez obzira što imamo više zahteva za obradu istog resursa, svi oni se ređaju sekvencijalno PO VREMENU PRISTIZANJA i tako će biti izvršavani
		- sekvencijalna konzistentnost podataka
		
* Redis vodi računa o objektima (construct/destruct):
	- Ukoliko za vrednost ključa ne postoji struktura, pri prvoj "push" operaciji, redis automatski kreira odgovarajuću strukturu i dodeljuje joj prosleđenu vrednost
	- Ovo važi i za uništavanje/brisanje ključa, čim se isprazni struktura, automatski se briše i ključ pod kojim je bila čuvana
	

* Komande gledati na redis.io

* Komunijkacija sa redisom:
	- Config klasasaa
		- Na kom portu
		- U kom modu radi:
			- Single Host
			- Redis Cluster => High availability
			- Redis Sentinel => rešavanje problema fail-ova
	
* Globalni brojač
	- Inkrement je atomična operacija

* Šema ključa
	- prefix + hash + suffix
	
* Pamćenje objekata
	- Kao JSON, kroz serijalizaciju (gleda ih kao stringove)
	- JsonSerializer
	- DataContract i DataMember za serijalizaciju